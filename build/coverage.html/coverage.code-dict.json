{"/home/travis/build/npmtest/node-npmtest-naught/test.js":"/* istanbul instrument in package npmtest_naught */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-naught/lib.npmtest_naught.js":"/* istanbul instrument in package npmtest_naught */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_naught = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_naught = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-naught/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-naught && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_naught */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_naught\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_naught.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_naught.rollup.js'] =\n            local.assetsDict['/assets.npmtest_naught.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_naught.__dirname + '/lib.npmtest_naught.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-naught/node_modules/naught/lib/main.js":"#!/usr/bin/env node\n\nvar fs = require('fs');\nvar os = require('os');\nvar net = require('net');\nvar assert = require('assert');\nvar json_socket = require('./json_socket');\nvar spawn = require('child_process').spawn;\nvar path = require('path');\nvar DEFAULT_IPC_FILE = 'naught.ipc';\nvar DEFAULT_PID_FILE = 'naught.pid';\nvar CWD = process.cwd();\nvar daemon = require('./daemon');\nvar packageJson = require('../package.json');\n\nvar cmds = {\n  start: {\n    help: \"naught start [options] server.js [script-options]\\n\\n\" +\n\n      \"    Starts server.js as a daemon passing script-options as command\\n\" +\n      \"    line arguments.\\n\\n\" +\n\n      \"    Each worker's stdout and stderr are redirected to a log files\\n\" +\n      \"    specified by the `stdout` and `stderr` parameters. When a log file\\n\" +\n      \"    becomes larger than `max-log-size`, the log file is renamed using the\\n\" +\n      \"    current date and time, and a new log file is opened.\\n\\n\" +\n\n      \"    With naught, you can use `console.log` and friends. Because naught\\n\" +\n      \"    pipes the output into a log file, node.js treats stdout and stderr\\n\" +\n      \"    as asynchronous streams.\\n\\n\" +\n\n      \"    If you don't want a particular log, use `/dev/null` for the path. Naught\\n\" +\n      \"    special cases this filename and disables that log altogether.\\n\\n\" +\n\n      \"    When running in `daemon-mode` `false`, naught will start the master\\n\" +\n      \"    process and then block. It listens to SIGHUP for restarting and SIGTERM\\n\" +\n      \"    for stopping. In this situation you may use `-` for `stderr` and/or\\n\" +\n      \"    `stdout` which will redirect the respective streams to naught's output\\n\" +\n      \"    streams instead of a log file.\\n\\n\" +\n\n      \"    Creates an `ipc-file` which naught uses to communicate with your\\n\" +\n      \"    server once it has started.\\n\\n\" +\n\n      \"    Available options and their defaults:\\n\\n\" +\n\n      \"    --worker-count 1\\n\" +\n      \"    --ipc-file \" + DEFAULT_IPC_FILE + \"\\n\" +\n      \"    --pid-file \" + DEFAULT_PID_FILE + \"\\n\" +\n      \"    --log naught.log\\n\" +\n      \"    --stdout stdout.log\\n\" +\n      \"    --stderr stderr.log\\n\" +\n      \"    --max-log-size 10485760\\n\" +\n      \"    --cwd \" + CWD + \"\\n\" +\n      \"    --daemon-mode true\\n\" +\n      \"    --remove-old-ipc false\\n\" +\n      \"    --node-args ''\",\n    fn: function(argv){\n      var options = {\n        'worker-count': '1',\n        'ipc-file': DEFAULT_IPC_FILE,\n        'pid-file': DEFAULT_PID_FILE,\n        'log': 'naught.log',\n        'stdout': 'stdout.log',\n        'stderr': 'stderr.log',\n        'max-log-size': '10485760',\n        'cwd': CWD,\n        'daemon-mode': 'true',\n        'remove-old-ipc': 'false',\n        'node-args': '',\n      };\n      var arr = chompArgv(options, argv)\n        , err = arr[0]\n        , script = arr[1];\n      if (!err && script != null) {\n        options['daemon-mode'] = options['daemon-mode'] === 'true';\n        options['remove-old-ipc'] = options['remove-old-ipc'] === 'true';\n        options['worker-count'] = extendedWorkerCount(options['worker-count']);\n        if (isNaN(options['worker-count'])) return false;\n        options['max-log-size'] = parseInt(options['max-log-size'], 10);\n        if (isNaN(options['max-log-size'])) return false;\n        startScript(options, script, argv);\n        return true;\n      } else {\n        return false;\n      }\n    }\n  },\n  stop: {\n    help: \"naught stop [options] [ipc-file]\\n\\n\" +\n\n      \"    Stops the running server which created `ipc-file`.\\n\" +\n      \"    Uses `\" + DEFAULT_IPC_FILE + \"` by default.\\n\\n\" +\n\n      \"    This sends the 'shutdown' message to all the workers and waits for\\n\" +\n      \"    them to exit gracefully.\\n\\n\" +\n\n      \"    If you specify a timeout, naught will forcefully kill your workers\\n\" +\n      \"    if they do not shut down gracefully within the timeout.\\n\\n\" +\n\n      \"    Available options and their defaults:\\n\\n\" +\n\n      \"        --timeout none\\n\" +\n      \"        --pid-file \" + DEFAULT_PID_FILE,\n    fn: function(argv){\n      var options = {\n        'timeout': 'none',\n        'pid-file': DEFAULT_PID_FILE\n      };\n      var arr = chompArgv(options, argv)\n        , err = arr[0]\n        , ipcFile = arr[1] || DEFAULT_IPC_FILE;\n      if (!err && argv.length === 0) {\n        options.timeout = parseFloat(options.timeout);\n        if (isNaN(options.timeout)) {\n          options.timeout = null;\n        }\n        stopScript(options, ipcFile);\n        return true;\n      } else {\n        return false;\n      }\n    }\n  },\n  status: {\n    help: \"naught status [ipc-file]\\n\\n\" +\n      \"    Displays whether a server is running or not.\\n\" +\n      \"    Uses `\" + DEFAULT_IPC_FILE + \"` by default.\",\n    fn: function(argv){\n      if (argv.length > 1) {\n        return false;\n      }\n      var ipcFile = argv[0] || DEFAULT_IPC_FILE;\n      displayStatus(ipcFile);\n      return true;\n    }\n  },\n  deploy: {\n    help: \"naught deploy [options] [ipc-file]\\n\\n\" +\n\n      \"    Replaces workers with new workers using new code and optionally\\n\" +\n      \"    the environment variables from this command.\\n\\n\" +\n\n      \"    Naught spawns all the new workers and waits for them to all become\\n\" +\n      \"    online before killing a single old worker. This guarantees zero\\n\" +\n      \"    downtime if any of the new workers fail and provides the ability to\\n\" +\n      \"    cleanly abort the deployment if it hangs.\\n\\n\" +\n\n      \"    A hanging deploy happens when a new worker fails to emit the 'online'\\n\" +\n      \"    message, or when an old worker fails to shutdown upon receiving the\\n\" +\n      \"    'shutdown' message. A keyboard interrupt will cause a deploy-abort,\\n\" +\n      \"    cleanly and with zero downtime.\\n\\n\" +\n\n      \"    If `timeout` is specified, naught will automatically abort the deploy\\n\" +\n      \"    if it does not finish within those seconds.\\n\\n\" +\n\n      \"    If `override-env` is true, the environment varibables that are set with\\n\" +\n      \"    this command are used to override the original environment variables\\n\" +\n      \"    used with the `start` command. If any variables are missing, the\\n\" +\n      \"    original values are left intact.\\n\\n\" +\n\n      \"    `worker-count` can be used to change the number of workers running. A\\n\" +\n      \"    value of `0` means to keep the same number of workers.\\n\" +\n      \"    A value of 'auto', will set value as per the number of available CPUs.\\n\\n\" +\n\n      \"    `cwd` can be used to change the cwd directory of the master process.\\n\" +\n      \"    This allows you to release in different directories. Unfortunately,\\n\" +\n      \"    this option doesn't update the script location. For example, if you\\n\" +\n      \"    start naught `naught start --cwd /release/1 server.js` and deploy\\n\" +\n      \"    `naught deploy --cwd /release/2` the script file will not change from\\n\" +\n      \"    '/release/1/server.js' to '/release/2/server.js'. You have to create\\n\" +\n      \"    a symlink and pass the full symlink path to naught start\\n\" +\n      \"    '/current/server.js'. After creating the symlink naught starts the\\n\" +\n      \"    correct script, but the cwd is still old and require loads files from\\n\" +\n      \"    from the old directory. The cwd option allows you to update the cwd\\n\" +\n      \"    to the new directory. It defaults to naught's cwd.\\n\\n\" +\n\n      \"    Uses `\" + DEFAULT_IPC_FILE + \"` by default.\\n\\n\" +\n\n      \"    Available options and their defaults:\\n\\n\" +\n\n      \"        --worker-count 0\\n\" +\n      \"        --override-env true\\n\" +\n      \"        --timeout none\\n\" +\n      \"        --cwd \" + CWD,\n    fn: function(argv){\n      var options = {\n        'worker-count': 0,\n        'override-env': 'true',\n        'timeout': 'none',\n        'cwd': CWD\n      };\n      var arr = chompArgv(options, argv)\n        , err = arr[0]\n        , ipcFile = arr[1] || DEFAULT_IPC_FILE;\n      if (!err && argv.length === 0) {\n        options['override-env'] = options['override-env'] === 'true';\n        options.timeout = parseFloat(options.timeout);\n        if (isNaN(options.timeout)) options.timeout = null;\n\n        options['worker-count'] = parseInt(options['worker-count'], 10);\n        if (isNaN(options['worker-count'])) return false;\n\n        deploy(options, ipcFile);\n        return true;\n      } else {\n        return false;\n      }\n    }\n  },\n  'deploy-abort': {\n    help: \"naught deploy-abort [ipc-file]\\n\\n\" +\n\n      \"    Aborts a hanging deploy. A hanging deploy happens when a new worker\\n\" +\n      \"    fails to emit the 'online' message, or when an old worker fails\\n\" +\n      \"    to shutdown upon receiving the 'shutdown' message.\\n\\n\" +\n\n      \"    When deploying, a keyboard interrupt will cause a deploy-abort,\\n\" +\n      \"    so the times you actually have to run this command will be few and\\n\" +\n      \"    far between.\\n\\n\" +\n\n      \"    Uses `\" + DEFAULT_IPC_FILE + \"` by default.\",\n    fn: function(argv){\n      if (argv.length > 1) return false;\n      var ipcFile = argv[0] || DEFAULT_IPC_FILE;\n      deployAbort(ipcFile);\n      return true;\n    }\n  },\n  version: {\n    help: \"naught version\\n\\n\" +\n\n      \"    Prints the version of naught and exits.\",\n    fn: function(argv) {\n      if (argv) {\n        if (argv.length > 0) return false;\n        console.log(packageJson.version);\n        return true;\n      }\n    },\n  },\n  help: {\n    help: \"naught help [cmd]\\n\\n\" +\n\n      \"    Displays help for cmd.\",\n    fn: function(argv){\n      var cmd;\n      if (argv.length === 1 && (cmd = cmds[argv[0]]) != null) {\n        console.log(cmd.help);\n      } else {\n        printUsage();\n      }\n      return true;\n    }\n  }\n};\n\nvar cmd = cmds[process.argv[2]]\nif (cmd) {\n  if (!cmd.fn(process.argv.slice(3))) {\n    console.error(cmd.help);\n  }\n} else {\n  printUsage();\n  process.exit(1);\n}\n\nfunction chompArgv(obj, argv){\n  while (argv.length) {\n    var arg = argv.shift();\n    if (arg.indexOf('--') === 0) {\n      var argName = arg.substring(2);\n      if (!(argName in obj)) {\n        return [new Error('InvalidArgument'), null];\n      }\n      if (argv.length === 0) {\n        return [new Error('MissingArgument'), null];\n      }\n      obj[argName] = argv.shift();\n    } else {\n      return [null, arg];\n    }\n  }\n  return [null, null];\n}\n\nfunction connectToDaemon(socket_path, cbs){\n  var socket = net.connect(socket_path, cbs.ready);\n  json_socket.listen(socket, cbs.event);\n  return socket;\n}\n\nfunction assertErrorIsFromInvalidSocket(error){\n  if (error.code !== 'ENOENT') {\n    throw error;\n  }\n}\n\nfunction exitWithConnRefusedMsg(socket_path){\n  fs.writeSync(process.stderr.fd,\n      \"unable to connect to ipc-file `\" + socket_path + \"`\\n\\n\" +\n      \"1. the ipc file specified is invalid, or\\n\" +\n      \"2. the daemon process died unexpectedly\\n\");\n  process.exit(1);\n}\n\nfunction getDaemonMessages(socket_path, cbs){\n  var socket = connectToDaemon(socket_path, cbs);\n  socket.on('error', function(error){\n    if (error.code === 'ENOENT') {\n      fs.writeSync(process.stderr.fd, \"server not running\\n\");\n      if(cbs.serverNotRunning) {\n        // Caller wants to handle the condition of server not running,\n        // so let them do it.\n        cbs.serverNotRunning();\n      } else {\n        // Caller isn't prepared to deal with server not running, so die.\n        process.exit(1);\n      }\n    } else if (error.code === 'ECONNREFUSED') {\n      exitWithConnRefusedMsg(socket_path);\n    } else {\n      throw error;\n    }\n  });\n  return socket;\n}\n\nfunction printUsage(){\n  for (var name in cmds) {\n    var cmd = cmds[name];\n    console.error(\"\\n\" + cmd.help + \"\\n\");\n  }\n}\n\nfunction startScript(options, script, argv){\n  var ipcFile = options['ipc-file'];\n  var socket = connectToDaemon(ipcFile, {\n    ready: function(){\n      json_socket.send(socket, {\n        action: 'NaughtStatus'\n      });\n    },\n    event: function(msg){\n      if (msg.event === 'Status') {\n        fs.writeSync(process.stdout.fd, statusMsg(msg));\n        process.exit(1);\n      } else {\n        printDaemonMsg(msg);\n      }\n    }\n  });\n  socket.on('error', onSocketError);\n\n  function onSocketError(error) {\n    socket.end();\n    if (error.code === 'ECONNREFUSED') {\n      if(options['remove-old-ipc']) {\n        fs.writeSync(process.stderr.fd,\n            \"unable to connect to ipc-file `\" + ipcFile + \"`\\n\\n\" +\n            \"removing the ipc-file and attempting to continue\\n\");\n        fs.unlinkSync(ipcFile);\n        startDaemon();\n      } else {\n        exitWithConnRefusedMsg(ipcFile);\n      }\n    } else if (error.code === 'ENOENT') {\n      // no server running\n      startDaemon();\n    } else {\n      throw error;\n    }\n  }\n\n  function startDaemon(){\n    var args = [\n      options['worker-count'],\n      path.resolve(CWD, ipcFile),\n      resolveLogPath(options.log),\n      resolveLogPath(options.stderr),\n      resolveLogPath(options.stdout),\n      options['max-log-size'],\n      path.resolve(CWD, script),\n      options['node-args'],\n      options['pid-file']\n    ].concat(argv);\n    if (options['daemon-mode']) {\n      startDaemonChild(args);\n    } else {\n      startBlockingMaster(args);\n    }\n  }\n\n  function startBlockingMaster(args) {\n    daemon.start(args);\n  }\n\n  function startDaemonChild(args) {\n    var modulePath = path.resolve(__dirname, \"start_daemon.js\");\n    var child = spawn(process.execPath, [modulePath].concat(args), {\n      env: process.env,\n      stdio: ['ignore', 'ignore', 'ignore', 'ipc'],\n      detached: true,\n      cwd: options.cwd,\n    });\n    child.unref();\n    child.on('message', function(msg){\n      if (msg.event === 'Error') {\n        fs.writeSync(process.stderr.fd,\n          \"unable to start daemon: \" + msg.value + \"\\n\");\n        process.exit(1);\n      } else if (msg.event === 'IpcListening') {\n        child.disconnect();\n        var sentShutdown = false;\n        var socket = connectToDaemon(ipcFile, {\n          event: function(msg){\n            if (msg.event === 'Ready') {\n              process.stdout.write(statusMsg(msg));\n              socket.end();\n            } else if (msg.event === 'Shutdown') {\n              console.error(\"The server crashed without booting. Check stderr.log.\");\n              socket.end();\n              process.exit(1);\n            } else {\n              printDaemonMsg(msg);\n            }\n          }\n        });\n      } else {\n        throw new Error(\"unexpected message from daemon\");\n      }\n    });\n  }\n}\n\nfunction resolveLogPath(logPath) {\n  if (logPath === '-') {\n    return '-';\n  } else {\n    return path.resolve(CWD, logPath);\n  }\n}\n\nfunction stopScript(options, ipcFile){\n  var socket = getDaemonMessages(ipcFile, {\n    ready: function(){\n      json_socket.send(socket, {\n        action: 'NaughtShutdown',\n        timeout: options.timeout\n      });\n    },\n    event: function(msg){\n      if (msg.event === 'Shutdown') {\n        socket.end();\n      } else if (msg.event === 'AlreadyShuttingDown') {\n        console.error(\"Waiting for shutdown already in progress.\");\n        console.error(\"If it hangs, Ctrl+C this command and try it again with --timeout 1\");\n      } else {\n        printDaemonMsg(msg);\n      }\n    },\n    serverNotRunning: function() {\n      // The server isn't running.\n      // Who cares, we're trying to stop it anyway, this is not an error.\n    }\n  });\n}\n\nfunction workerCountsFromMsg(msg){\n  if (!msg.count) return \"Unknown\";\n  return \"booting: \" + msg.count.booting +\n    \", online: \" + msg.count.online +\n    \", dying: \" + msg.count.dying +\n    \", new_online: \" + msg.count.new_online;\n}\n\nfunction printDaemonMsg(msg){\n  console.error(msg.event + \". \" + workerCountsFromMsg(msg));\n}\n\nfunction statusMsg(msg){\n  if (msg.count.booting > 0) {\n    return \"booting\\n\" + workerCountsFromMsg(msg) + \"\\n\";\n  } else if (msg.waiting_for === 'shutdown') {\n    return \"shutting down\\n\" + workerCountsFromMsg(msg) + \"\\n\";\n  } else if (msg.waiting_for != null) {\n    return \"deploy in progress\\n\" + workerCountsFromMsg(msg) + \"\\n\";\n  } else {\n    return \"workers online: \" + msg.count.online + \"\\n\";\n  }\n}\n\nfunction deploy(options, ipcFile){\n  var socket = getDaemonMessages(ipcFile, {\n    ready: function(){\n      setAbortKeyboardHook();\n      json_socket.send(socket, {\n        action: 'NaughtDeploy',\n        newWorkerCount: options['worker-count'],\n        environment: options['override-env'] ? process.env : {},\n        timeout: options.timeout,\n        cwd: path.resolve(options.cwd)\n      });\n    },\n    event: function(msg){\n      switch (msg.event) {\n      case 'ErrorDeployInProgress':\n        console.error(\"Deploy already in progress. Press Ctrl+C to abort.\");\n        break;\n      case 'Shutdown':\n        console.error(\"Bootup never succeeded. Check stderr.log and usage of 'online' and 'shutdown' events.\");\n        process.exit(1);\n        break;\n      case 'DeployFailed':\n        console.log(\"Deploy failed. Check stderr.log and usage of 'online' and 'shutdown' events.\");\n        process.exit(1);\n        break;\n      case 'Ready':\n        console.error(\"done\");\n        process.exit(0);\n        break;\n      default:\n        printDaemonMsg(msg);\n      }\n    }\n  });\n  function setAbortKeyboardHook(){\n    process.once('SIGINT', handleSigInt);\n  }\n  function handleSigInt(){\n    console.error(\"aborting deploy\");\n    json_socket.send(socket, {\n      action: 'NaughtDeployAbort'\n    });\n  }\n}\n\nfunction deployAbort(ipcFile){\n  var socket = getDaemonMessages(ipcFile, {\n    ready: function(){\n      json_socket.send(socket, {\n        action: 'NaughtDeployAbort'\n      });\n    },\n    event: function(msg){\n      switch (msg.event) {\n      case 'ErrorNoDeployInProgress':\n        console.error(\"no deploy in progress\");\n        process.exit(1);\n        break;\n      case 'Ready':\n        console.error(\"deploy aborted\");\n        process.exit(0);\n        break;\n      default:\n        printDaemonMsg(msg);\n      }\n    }\n  });\n}\n\nfunction displayStatus(ipcFile){\n  var socket = getDaemonMessages(ipcFile, {\n    ready: function(){\n      json_socket.send(socket, {\n        action: 'NaughtStatus'\n      });\n    },\n    event: function(msg){\n      if (msg.event === 'Status') {\n        process.stdout.write(statusMsg(msg));\n        socket.end();\n      } else {\n        printDaemonMsg(msg);\n      }\n    }\n  });\n}\n\nfunction extendedWorkerCount(workerCount){\n  if (workerCount === 'auto'){\n    return os.cpus().length;\n  } else {\n    return parseInt(workerCount, 10);\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-naught/node_modules/naught/lib/json_socket.js":"exports.listen = listen;\nexports.send = send;\n\nfunction listen(socket, onMessage) {\n  socket.setEncoding('utf8');\n  var buffer = \"\";\n  socket.on('data', function(data){\n    buffer += data;\n    var msg;\n    while (msg = msgFromBuffer()) {\n      onMessage(msg);\n    }\n  });\n  function msgFromBuffer() {\n    var sep = buffer.indexOf(\"\\n\");\n    if (sep === -1) return null;\n    var msgLen = parseInt(buffer.substring(0, sep), 10);\n    var nextMsgStart = sep + msgLen + 1;\n    if (nextMsgStart > buffer.length) {\n      return null;\n    }\n    var result = JSON.parse(buffer.substring(sep + 1, nextMsgStart));\n    buffer = buffer.substring(nextMsgStart);\n    return result;\n  }\n}\nfunction send(socket, object){\n  var strMsg = JSON.stringify(object);\n  socket.write(strMsg.length + \"\\n\" + strMsg);\n}\n","/home/travis/build/npmtest/node-npmtest-naught/node_modules/naught/lib/daemon.js":"var fs = require('fs');\nvar mkdirp = require('mkdirp');\nvar path = require('path');\nvar spawn = require('child_process').spawn;\nvar net = require('net');\nvar assert = require('assert');\nvar Pend = require('pend');\nvar jsonSocket = require('./json_socket');\nvar createLog = require('./log').create;\n\nvar own = {}.hasOwnProperty;\n\nexports.start = startDaemon;\n\nfunction startDaemon(argv) {\n  var workerCount = parseInt(argv.shift(), 10);\n  var socketPath = argv.shift();\n  var logNaughtPath = argv.shift();\n  var logStderrPath = argv.shift();\n  var logStdoutPath = argv.shift();\n  var maxLogSize = parseInt(argv.shift(), 10);\n  var script = argv.shift();\n  var nodeArgsStr = argv.shift();\n  var pidFile = argv.shift();\n\n  var naughtLog = null;\n  var stderrLog = null;\n  var stdoutLog = null;\n\n  var naughtLogBehavior = null;\n  var stderrBehavior = null;\n  var stdoutBehavior = null;\n\n  var socket = null;\n  var master = null;\n  var server = null;\n  \n  fs.writeFile(pidFile, process.pid, function(){\n    createLogsAndIpcServer(function(err) {\n      if (err) {\n        processSend({event: 'Error', value: err.message});\n        return;\n      }\n\n      process.on('SIGHUP', function() {\n        handleSocketMessage({\n          action: 'NaughtDeploy',\n          newWorkerCount: 0,\n          environment: {},\n          timeout: null,\n          cwd: null,\n        });\n      });\n\n      process.on('SIGTERM', function() {\n        handleSocketMessage({ action: 'NaughtShutdown' });\n      });\n\n      process.on('SIGINT', function() {\n        handleSocketMessage({ action: 'NaughtShutdown' });\n      });\n\n      processSend({event: 'IpcListening'});\n      spawnMaster();\n    });\n  });\n  function maybeCreateLog(logPath, cb) {\n    // special case /dev/null - disable logging altogether\n    if (logPath === '/dev/null') {\n      cb(null, {\n        behavior: 'ignore',\n        log: null,\n      });\n    } else if (logPath === '-') {\n      cb(null, {\n        behavior: 'inherit',\n        log: null,\n      });\n    } else {\n      createLog(logPath, maxLogSize, function(err, logStream) {\n        if (err) return cb(err);\n        cb(null, {\n          behavior: 'pipe',\n          log: logStream,\n        });\n      });\n    }\n  }\n\n  function createLogs(cb) {\n    var pend = new Pend();\n    pend.go(function(cb) {\n      maybeCreateLog(logNaughtPath, function(err, results) {\n        naughtLog = results.log;\n        naughtLogBehavior = results.behavior;\n        cb(err);\n      });\n    });\n    pend.go(function(cb) {\n      maybeCreateLog(logStderrPath, function(err, results) {\n        stderrLog = results.log;\n        stderrBehavior = results.behavior;\n        cb(err);\n      });\n    });\n    pend.go(function(cb) {\n      maybeCreateLog(logStdoutPath, function(err, results) {\n        stdoutLog = results.log;\n        stdoutBehavior = results.behavior;\n        cb(err);\n      });\n    });\n    pend.wait(function(err) {\n      if (err) return cb(err);\n\n      if (naughtLogBehavior === 'inherit') {\n        naughtLog = process.stderr;\n      }\n\n      if (stderrBehavior === 'pipe') {\n        stderrLog.on('error', function(err) {\n          log(\"Error writing to \" + logStderrPath + \": \" + err.stack + \"\\n\");\n        });\n      }\n      if (stdoutBehavior === 'pipe') {\n        stdoutLog.on('error', function(err) {\n          log(\"Error writing to \" + logStdoutPath + \": \" + err.stack + \"\\n\");\n        });\n      }\n      if (naughtLogBehavior === 'pipe') {\n        naughtLog.on('error', function(err){\n          process.stderr.write(\"Error writing to \" + logNaughtPath + \": \" + err.stack + \"\\n\");\n        });\n      }\n      cb();\n    });\n  }\n\n  function log(str) {\n    if (naughtLog) naughtLog.write(str);\n  }\n\n  function workerCountsFromMsg(counts) {\n    return \"booting: \" + counts.booting +\n      \", online: \" + counts.online +\n      \", dying: \" + counts.dying +\n      \", new_online: \" + counts.new_online;\n  }\n\n  function onMessage(message) {\n    if (naughtLog) {\n      var str = message.event + \".\";\n      if (message.count) str += \" \" + workerCountsFromMsg(message.count);\n      naughtLog.write(str + \"\\n\");\n    }\n    if (socket) jsonSocket.send(socket, message);\n    processSend(message);\n  }\n\n  function createLogsAndIpcServer(cb) {\n    var pend = new Pend();\n    createLogs(pend.hold());\n    mkdirp(path.dirname(socketPath), pend.hold());\n    pend.wait(function(err) {\n      if (err) return cb(err);\n      server = net.createServer(function(newSocket){\n        if (socket != null) {\n          log(\"Warning: Only one connection to daemon allowed. Terminating old connection.\\n\");\n          socket.destroy();\n        }\n        socket = newSocket;\n        socket.on('error', function(err){\n          log(\"Error: ipc channel socket: \" + err.stack + \"\\n\");\n        });\n        socket.once('end', function(){\n          socket = null;\n        });\n        jsonSocket.listen(socket, function(msg){\n          var response = handleSocketMessage(msg);\n          if (response) {\n            jsonSocket.send(response);\n          }\n        });\n      });\n      server.listen(socketPath, cb);\n    });\n  }\n\n  function spawnMaster() {\n    var nodeArgs = splitCmdLine(nodeArgsStr);\n    var stdoutValue = (stdoutBehavior === 'inherit') ? process.stdout : stdoutBehavior;\n    var stderrValue = (stderrBehavior === 'inherit') ? process.stderr : stderrBehavior;\n    master = spawn(process.execPath, nodeArgs.concat([path.join(__dirname, \"master.js\"), workerCount, script]).concat(argv), {\n      env: process.env,\n      stdio: [process.stdin, stdoutValue, stderrValue, 'ipc'],\n      cwd: process.cwd(),\n    });\n    master.on('message', onMessage);\n    if (stdoutBehavior === 'pipe') {\n      master.stdout.pipe(stdoutLog, {end: false});\n    }\n    if (stderrBehavior === 'pipe') {\n      master.stderr.pipe(stderrLog, {end: false});\n    }\n    master.on('close', function(){\n      onMessage({\n        event: 'Shutdown',\n        count: {\n          booting: 0,\n          online: 0,\n          dying: 0,\n          new_online: 0\n        }\n      });\n      try{\n        fs.unlinkSync(pidFile);\n      } catch (e) {}\n        \n      server.close();\n    });\n  }\n\n  function handleSocketMessage(msg) {\n    if (master != null) {\n      if (msg.action === 'NaughtDeploy') {\n        extend(process.env, msg.environment);\n      }\n      master.send(msg);\n      return null;\n    } else {\n      processSend({event: 'Error', value: 'StillBooting'});\n      return {\n        event: 'ErrorStillBooting',\n      };\n    }\n  }\n}\n\nfunction splitCmdLine(str) {\n  if (str.length === 0) {\n    return [];\n  } else {\n    return str.split(/\\s+/);\n  }\n}\n\nfunction extend(obj, src) {\n  for (var key in src) {\n    if (own.call(src, key)) obj[key] = src[key];\n  }\n  return obj;\n}\n\nfunction processSend(msg) {\n  try {\n    process.send(msg);\n  } catch (err) {\n    // ignore\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-naught/node_modules/naught/lib/log.js":"exports.create = create;\n\nvar fs = require('fs');\nvar mkdirp = require('mkdirp');\nvar path = require('path');\nvar EventEmitter = require('events').EventEmitter;\nvar zlib = require('zlib');\n\n// cb(err, log)\n//   log.write(str, cb)\n//     cb(err)\nfunction create(filePath, maxSize, cb) {\n  createStream(filePath, onHaveStream);\n\n  function onHaveStream(err, stream, size) {\n    if (err) return cb(err);\n    var pending = null;\n    var log = new EventEmitter();\n    stream.on('error', function(err) {\n      log.emit('error', err);\n    });\n    log.write = logWrite;\n    cb(null, log);\n    function logWrite(str) {\n      var flushed = stream.write(str);\n      size += str.length;\n      if (pending === 'flush') {\n        if (flushed) {\n          pending = null;\n        } else {\n          stream.once('drain', function() {\n            pending = null;\n          });\n        }\n      }\n      if (pending == null && size >= maxSize) {\n        pending = 'rename';\n        var archiveName = getArchiveName(filePath);\n        fs.rename(filePath, archiveName, function(err){\n          if (err) return log.emit('error', err);\n          createStream(filePath, function(err, newStream, newSize){\n            if (err) return log.emit('error', err);\n            stream.once('close', function() {\n              var gzip = zlib.createGzip();\n              var inp = fs.createReadStream(archiveName);\n              var out = fs.createWriteStream(archiveName + \".gz\");\n              inp.on('error', function(err) {\n                return log.emit('error', err);\n              });\n              out.on('error', function(err){\n                return log.emit('error', err);\n              });\n              inp.pipe(gzip).pipe(out);\n              out.once('close', function(){\n                fs.unlink(archiveName, function(err){\n                  if (err) return log.emit('error', err);\n                });\n              });\n            });\n            stream.end();\n            newStream.on('error', function(err) {\n              return log.emit('error', err);\n            });\n            size = newSize;\n            stream = newStream;\n            pending = 'flush';\n          });\n        });\n      }\n    }\n  }\n}\nfunction getFileSize(filePath, cb){\n  fs.stat(filePath, function(err, stats){\n    if (err) {\n      if (err.code === 'ENOENT') {\n        return cb(null, 0);\n      } else {\n        return cb(err);\n      }\n    } else {\n      cb(null, stats.size);\n    }\n  });\n}\nfunction createStream(filePath, cb){\n  mkdirp(path.dirname(filePath), function(err){\n    if (err) return cb(err);\n    getFileSize(filePath, function(err, size){\n      if (err) return cb(err);\n      var stream = fs.createWriteStream(filePath, {\n        flags: 'a'\n      });\n      cb(null, stream, size);\n    });\n  });\n}\nfunction getArchiveName(filePath){\n  var dirname = path.dirname(filePath);\n  var extname = path.extname(filePath);\n  var basename = path.basename(filePath, extname);\n  var timestamp = new Date().getTime();\n  return path.join(dirname, basename + \"-\" + timestamp + extname);\n}\n","/home/travis/build/npmtest/node-npmtest-naught/node_modules/naught/lib/master.js":"var cluster = require('cluster');\nvar assert = require('assert');\nvar Pend = require('pend');\n\nvar argv = process.argv.slice(2);\nvar workerCount = parseInt(argv.shift(), 10);\nvar script = argv.shift();\n\nvar own = {}.hasOwnProperty;\nvar statusesToShutdown = ['booting', 'online', 'new_online'];\n\n\ncluster.setupMaster({\n  exec: script,\n  args: argv\n});\nvar workers = {\n  // workers go here until they all have emitted 'online'\n  booting: newWorkerCollection(),\n  // workers move from here to 'dying' when we ask them to 'shutdown'\n  online: newWorkerCollection(),\n  // workers in here have been asked to 'shutdown'\n  dying: newWorkerCollection(),\n  // these are online workers ready to replace old workers\n  new_online: newWorkerCollection()\n};\nvar messageHandlers = {\n  'NaughtDeploy': onNaughtDeploy,\n  'NaughtDeployAbort': onNaughtDeployAbort,\n  'NaughtShutdown': onNaughtShutdown,\n  'NaughtStatus': onNaughtStatus,\n};\nvar workerStatus = {};\nvar waitingFor = null;\n\nprocess.on('message', dispatchMessage);\n\nevent('Bootup');\ndeployStart(function() {\n  if (workers.online.count === workerCount) {\n    event('Ready');\n  } else {\n    process.nextTick(function() {\n      process.exit(1);\n    });\n  }\n});\n\nfunction dispatchMessage(message) {\n  var handler = messageHandlers[message.action];\n  if (handler) {\n    handler(message);\n  } else {\n    event('UnrecognizedMessage');\n  }\n}\n\nfunction onNaughtDeployAbort(message) {\n  deployAbort(function() {\n    event('Ready');\n  });\n}\n\nfunction onNaughtDeploy(message) {\n  extend(process.env, message.environment);\n  workerCount = (message.newWorkerCount !== 0) ? message.newWorkerCount : workers.online.count;\n  if (message.cwd && message.cwd !== process.cwd()) process.chdir(message.cwd);\n  var timer = null;\n  deployStart(function(eventName){\n    if (timer != null) clearTimeout(timer);\n    event(eventName);\n  });\n  var timeout = message.timeout;\n  if (timeout != null) {\n    timer = wait(timeout, function(){\n      timer = null;\n      event('Timeout');\n      deployAbort(function() {\n        event('DeployFailed');\n      });\n    });\n  }\n}\n\nfunction onNaughtShutdown(message) {\n  var timer = null;\n  shutdownAll(function(aborted){\n    if (timer != null) clearTimeout(timer);\n    process.exit(0);\n  });\n  var timeout = message.timeout;\n  if (timeout != null) {\n    timer = wait(timeout, function(){\n      timer = null;\n      event('Timeout');\n      destroyAll();\n    });\n  }\n}\n\nfunction onNaughtStatus(message) {\n  event('Status');\n}\nfunction wait(seconds, cb){\n  return setTimeout(cb, seconds * 1000);\n}\nfunction newWorkerCollection(){\n  return {\n    hash: {},\n    count: 0\n  };\n}\nfunction setWorkerStatus(worker, status){\n  addWorker(status, removeWorker(worker.process.pid));\n}\nfunction addWorker(status, worker){\n  var pid = worker.process.pid;\n  workerStatus[pid] = status;\n  var collection = workers[status];\n  var hash = collection.hash;\n  if (!(pid in hash)) {\n    collection.count += 1;\n  }\n  hash[pid] = worker;\n}\nfunction removeWorker(pid){\n  var status = workerStatus[pid];\n  delete workerStatus[pid];\n  var collection = workers[status];\n  var hash = collection.hash;\n  assert(pid in hash);\n  collection.count -= 1;\n  var worker = hash[pid];\n  delete hash[pid];\n  return worker;\n}\n\nfunction shiftWorker(status){\n  for (var pid in workers[status].hash) {\n    return removeWorker(pid);\n  }\n  assert(false);\n}\n\nfunction forEachWorker(status, cb){\n  var collection = workers[status];\n  for (var pid in collection.hash) {\n    cb(pid, collection.hash[pid]);\n  }\n}\n\nfunction onceOnline(worker, cb){\n  worker.on('message', onMessage);\n  function onMessage(message){\n    if (message === 'online') {\n      worker.removeListener('message', onMessage);\n      cb();\n    }\n  }\n}\n\nfunction makeWorker(number){\n  var worker = cluster.fork({'NAUGHT_WORKER': number});\n  var expectedExit = false;\n  assert(number>=0);\n  worker.on('message', onMessage);\n  worker.on('exit', onExit);\n  if (waitingFor == null) {\n    // this code activates when a server crashes during normal operations;\n    // no deploy is in progress\n    onceOnline(worker, function(){\n      setWorkerStatus(worker, 'online');\n      event('WorkerOnline');\n      if (workers.booting.count === 0) event('Ready');\n    });\n  }\n  return worker;\n\n  function onMessage(message){\n    if (message === 'offline') {\n      // worker declared itself offline. we're treating it as\n      // if it just now crashed.\n\n      // but only accept the offline message from a process that is not already\n      // dying\n      if (workerStatus[worker.process.pid] === 'dying') return;\n\n      expectedExit = true;\n\n      setWorkerStatus(worker, 'dying');\n      event('WorkerOffline');\n\n      addWorker('booting', makeWorker(number));\n      event('SpawnNew');\n    }\n  }\n  function onExit() {\n    // ignore if this happened due to a deployment\n    if (waitingFor != null) return;\n    removeWorker(worker.process.pid);\n    if (!expectedExit) {\n      addWorker('booting', makeWorker(number));\n    }\n    event('WorkerDeath');\n  }\n}\n\nfunction event(name){\n  process.send({\n    count: {\n      booting: workers.booting.count,\n      online: workers.online.count,\n      dying: workers.dying.count,\n      new_online: workers.new_online.count\n    },\n    waitingFor: waitingFor,\n    event: name\n  });\n}\n\nfunction spawnNew(number, cb){\n  var newWorker;\n  assert(workers.booting.count < workerCount);\n  newWorker = makeWorker(number);\n  addWorker('booting', newWorker);\n  event('SpawnNew');\n  newWorker.on('exit', onExit);\n  onceOnline(newWorker, function(){\n    newWorker.removeListener('exit', onExit);\n    setWorkerStatus(newWorker, 'new_online');\n    event('NewOnline');\n    cb();\n  });\n  function onExit() {\n    // worker crashed before going online\n    removeWorker(newWorker.process.pid);\n    event('NewDeath');\n    cb();\n  }\n}\nfunction shutdownOneWorker(status){\n  return function(cb){\n    var collection = workers[status];\n    assert(collection.count > 0);\n    var dyingWorker = shiftWorker(status);\n    addWorker('dying', dyingWorker);\n    event('ShutdownOld');\n    dyingWorker.removeAllListeners('exit');\n    dyingWorker.on('exit', onExit);\n    var handledOnExit = false;\n    try {\n      dyingWorker.send('shutdown');\n      dyingWorker.disconnect();\n    } catch (err) {\n      onExit();\n    }\n    function onExit() {\n      if (handledOnExit) return;\n      handledOnExit = true;\n      removeWorker(dyingWorker.process.pid);\n      event('OldExit');\n      cb();\n    }\n  };\n}\nfunction deployStart(cb){\n  if (waitingFor === 'shutdown') {\n    return cb('ErrorShuttingDown');\n  } else if (waitingFor != null) {\n    return cb('ErrorDeployInProgress');\n  }\n  assert.strictEqual(workers.booting.count, 0);\n  waitingFor = 'new';\n  var pend = new Pend();\n  var count = workerCount;\n  for (var i = 0; i < count; i += 1) {\n    spawnNew(i, pend.hold());\n  }\n  pend.wait(function() {\n    if (workers.new_online.count !== workerCount) {\n      deployAbort(function() {\n        cb('DeployFailed');\n      });\n      return;\n    }\n    waitingFor = 'old';\n    var onlineCount = workers.online.count;\n    for (var i = 0; i < onlineCount; ++i) {\n      pend.go(shutdownOneWorker('online'));\n    }\n    pend.wait(function() {\n      assert.strictEqual(workers.online.count, 0);\n      waitingFor = null;\n      forEachWorker('new_online', function(pid, worker){\n        setWorkerStatus(worker, 'online');\n      });\n      cb('Ready');\n    });\n  });\n}\n\nfunction destroyWorkers(status){\n  return function(cb){\n    var newWorker = shiftWorker(status);\n    event('DestroyNew');\n    newWorker.removeAllListeners('exit');\n    newWorker.once('exit', function() {\n      event('NewDestroyed');\n      cb();\n    });\n    newWorker.destroy();\n  };\n}\n\nfunction deployAbort(cb){\n  switch (waitingFor) {\n  case 'new':\n    var pend = new Pend();\n    var i;\n    var newOnlineCount = workers.new_online.count;\n    var bootingCount = workers.booting.count;\n    for (i = 0; i < newOnlineCount; i += 1) {\n      pend.go(destroyWorkers('new_online'));\n    }\n    for (i = 0; i < bootingCount; i += 1) {\n      pend.go(destroyWorkers('booting'));\n    }\n    pend.wait(function() {\n      waitingFor = null;\n      cb();\n    });\n    break;\n  case 'old':\n    destroyDying();\n    cb();\n    break;\n  default:\n    event('ErrorNoDeployInProgress');\n  }\n}\n\nfunction shutdownAll(cb){\n  if (waitingFor === 'shutdown') {\n    event('AlreadyShuttingDown');\n    return;\n  }\n  waitingFor = 'shutdown';\n  var pend = new Pend();\n  statusesToShutdown.forEach(function(status) {\n    var count = workers[status].count;\n    for (var i = 0; i < count; ++i) {\n      pend.go(shutdownOneWorker(status));\n    }\n  });\n  pend.wait(cb);\n}\nfunction destroyDying(){\n  forEachWorker('dying', function(pid, dyingWorker){\n    event('DestroyOld');\n    dyingWorker.destroy();\n  });\n}\nfunction destroyAll(){\n  assert.strictEqual(workers.online.count, 0);\n  assert.strictEqual(workers.new_online.count, 0);\n  assert.strictEqual(workers.booting.count, 0);\n  destroyDying();\n}\n\nfunction extend(obj, src){\n  for (var key in src) {\n    if (own.call(src, key)) obj[key] = src[key];\n  }\n  return obj;\n}\n","/home/travis/build/npmtest/node-npmtest-naught/node_modules/naught/lib/start_daemon.js":"var daemon = require('./daemon');\n\ndaemon.start(process.argv.slice(2));\n"}